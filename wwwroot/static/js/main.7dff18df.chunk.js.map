{"version":3,"sources":["config.js","components/Header/Header.js","components/Filters/Filters.js","components/List/List.js","components/PaginationTool/PaginationTool.js","App.js","serviceWorker.js","index.js"],"names":["config","API","URL","Header","className","src","alt","Filters","props","FormControl","style","minWidth","InputLabel","Select","multiple","value","filter","lists","onChange","e","handleFilterChange","target","input","Input","renderValue","selected","map","Chip","key","label","options","name","MenuItem","id","socialNetworks","utils","DateFnsUtils","disableToolbar","variant","format","margin","initialDate","KeyboardButtonProps","finalDate","TextField","content","Button","color","onClick","getFilteredPosts","List","list","posts","i","Paper","elevation","socialNetwork","account","li","Date","date","toLocaleDateString","href","link","PaginationTool","limit","offset","total","_e","page","handlePaginationClick","handlePaginationLimitChange","App","state","postsData","pagination","filterOptions","getFullYear","getMonth","getDate","getOptions","axios","get","then","res","data","setState","size","post","summary","listSize","pageIndex","returnedListSize","_offset","filterAttr","this","click","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7dff18df.chunk.js","sourcesContent":["const config = {\n  API: {\n    URL: \"http://localhost:5000\",\n  }\n};\n\nexport default config;","import React from 'react';\n\nimport './Header.css';\n\nconst Header = () => {\n  return ( \n    <div className=\"GovPredict\">\n      <img src=\"https://www.govpredict.com/hubfs/Govpredict-October2019/Images/govpredict-d2ac8edd9dc1af5cb1b14eab8109e58732989c88f206ab57715b6207dfac1826.svg\" alt=\"\"/>\n    </div>  \n   );\n}\n \nexport default Header;","import React from \"react\";\nimport {\n  Button,\n  Chip,\n  FormControl,\n  Input,\n  InputLabel,\n  MenuItem,\n  Select,\n  TextField\n} from \"@material-ui/core\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker\n} from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\n\nimport \"./Filters.css\";\n\nconst Filters = props => {\n  return (\n    <div className=\"Filters\">\n      \n      {/* LISTS */}\n      <FormControl className=\"filter formcontrol\" style={{ minWidth: 200 }}>\n        <InputLabel>Lists</InputLabel>\n        <Select\n          multiple\n          value={props.filter.lists}\n          onChange={e => props.handleFilterChange(e.target.value, \"lists\")}\n          input={<Input />}\n          renderValue={selected => (\n            <div className=\"chips\">\n              {selected.map(value => (\n                <Chip key={value} label={value} className=\"chip\" />\n              ))}\n            </div>\n          )}\n        >\n          {props.options.lists.map(name => (\n            <MenuItem key={name} value={name}>\n              {name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n\n      {/* SOCIAL NETWORKS */}\n      <FormControl className=\"filter formControl\" style={{ minWidth: 200 }}>\n        <InputLabel>Social Networks</InputLabel>\n        <Select\n          id=\"scs-select\"\n          multiple\n          value={props.filter.socialNetworks}\n          onChange={e => props.handleFilterChange(e.target.value, \"socialNetworks\")}\n          input={<Input />}\n          renderValue={selected => (\n            <div className=\"chips\">\n              {selected.map(value => (\n                <Chip key={value} label={value} className=\"chip\" />\n              ))}\n            </div>\n          )}\n        >\n          {props.options.socialNetworks.map(name => (\n            <MenuItem key={name} value={name}>\n              {name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n\n        {/* InitialDate */}\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <KeyboardDatePicker\n          className=\"filter\"\n          disableToolbar\n          variant=\"inline\"\n          format=\"MM/dd/yyyy\"\n          margin=\"normal\"\n          label=\"Initial Date\"\n          value={props.filter.initialDate}\n          onChange={value => props.handleFilterChange(value, \"initialDate\")}\n          KeyboardButtonProps={{\n            \"aria-label\": \"change date\"\n          }}\n        />\n\n        {/* FinalDate */}\n        <KeyboardDatePicker\n          className=\"filter\"\n          disableToolbar\n          variant=\"inline\"\n          format=\"MM/dd/yyyy\"\n          margin=\"normal\"\n          label=\"Final Date\"\n          value={props.filter.finalDate}\n          onChange={value => props.handleFilterChange(value, \"finalDate\")}\n          KeyboardButtonProps={{\n            \"aria-label\": \"change date\"\n          }}\n        />\n      </MuiPickersUtilsProvider>\n\n      {/* Content */}\n      <TextField\n        className=\"filter\"\n        label=\"Search Content\"\n        value={props.filter.content}  \n        onChange={e => props.handleFilterChange(e.target.value, \"content\")}\n      />\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className=\"filter\"\n        onClick={() => props.getFilteredPosts()}\n      >\n        Search\n      </Button>\n    </div>\n  );\n};\n\nexport default Filters;\n","import React from \"react\";\nimport { Paper } from \"@material-ui/core\";\nimport LinkIcon from \"@material-ui/icons/Link\";\nimport FacebookIcon from \"@material-ui/icons/Facebook\";\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\nimport WebIcon from \"@material-ui/icons/Web\";\n\nimport \"./List.css\";\n\nconst List = props => {\n  const list = props.posts.map((e, i) => (\n    <Paper key={i} elevation={3} className=\"card\">\n      <div className=\"header\">\n        <div className=\"item\">\n          {(() => {\n            switch (e.socialNetwork) {\n              case \"Facebook\":\n                return <FacebookIcon />;\n              case \"Twitter\":\n                return <TwitterIcon />;\n              default:\n                return <WebIcon />;\n            }\n          })()}\n        </div>\n\n        <div className=\"item\">\n          <h4>{e.account}</h4>\n        </div>\n      </div>\n\n      <div className=\"content item\">\n        <p>{e.content}</p>\n      </div>\n\n      <div className=\"footer\">\n        <div className=\"item lists\">\n          {e.lists.map(li => (\n            <div key={li}>{li}</div>\n          ))}\n        </div>\n\n        <div className=\"item\">{new Date(e.date).toLocaleDateString()}</div>\n\n        <div className=\"item\">\n          <a href={e.link}>\n            <LinkIcon />\n          </a>\n        </div>\n      </div>\n    </Paper>\n  ));\n\n  return <div className=\"list\">{list}</div>;\n};\n\nexport default List;\n","import React from \"react\";\nimport Pagination from \"material-ui-flat-pagination\";\nimport { FormControl, InputLabel, Select, MenuItem } from \"@material-ui/core\";\n\nimport \"./PaginationTool.css\";\n\nconst PaginationTool = props => {\n  return (\n    <div className=\"pagination-container\">\n      <Pagination\n        className=\"pagination-component\"\n        limit={props.limit}\n        offset={props.offset}\n        total={props.total}\n        onClick={(_e, offset, page) => {\n          return props.handlePaginationClick(offset, page);\n        }}\n      />\n\n      <FormControl className=\"pagination-limit\">\n        <InputLabel>Limit</InputLabel>\n        <Select\n          value={props.limit}\n          onChange={e => props.handlePaginationLimitChange(e)}\n        >\n          <MenuItem value={10}>10</MenuItem>\n          <MenuItem value={20}>20</MenuItem>\n          <MenuItem value={50}>50</MenuItem>\n          <MenuItem value={100}>100</MenuItem>\n        </Select>\n      </FormControl>\n    </div>\n  );\n};\n\nexport default PaginationTool;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport config from \"./config\";\n\nimport Header from \"./components/Header/Header\";\nimport Filters from \"./components/Filters/Filters\";\nimport List from \"./components/List/List\";\nimport PaginationTool from \"./components/PaginationTool/PaginationTool\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    postsData: {\n      posts: []\n    },\n    pagination: {\n      limit: 10,\n      offset: 0,\n      page: 1,\n      total: 0\n    },\n    filterOptions: {\n      lists: [],\n      socialNetworks: []\n    },\n    filter: {\n      content: \"\",\n      initialDate: new Date(\n        new Date().getFullYear(),\n        new Date().getMonth(),\n        new Date().getDate() - 10\n      ),\n      finalDate: new Date(\n        new Date().getFullYear(),\n        new Date().getMonth(),\n        new Date().getDate()\n      ),\n      lists: [],\n      socialNetworks: []\n    }\n  };\n\n  componentDidMount() {\n    this.getOptions();\n    this.getFilteredPosts();\n  }\n\n  getOptions = () => {\n    axios.get(`${config.API.URL}/post/options`).then(res => {\n      const filterOptions = res.data;\n      this.setState({ filterOptions });\n    });\n  };\n\n  getFilteredPosts = (page = 1) => {\n    const size = this.state.pagination.limit;\n    axios\n      .post(`${config.API.URL}/post/filter/${page}/${size}`, this.state.filter)\n      .then(res => {\n        const pagination = {\n          ...this.state.pagination,\n          offset: res.data.summary.listSize * (res.data.summary.pageIndex - 1),\n          total: res.data.summary.returnedListSize\n        };\n        const postsData = res.data;\n        this.setState({ postsData, pagination });\n      });\n  };\n\n  handlePaginationClick = (_offset, page) => {\n    this.getFilteredPosts(page);\n  };\n\n  handlePaginationLimitChange = e => {\n    const { pagination } = this.state;\n    pagination.limit = e.target.value;\n    this.setState(pagination);\n  };\n\n  handleFilterChange = (value, filterAttr) => {\n    const { filter } = this.state;\n    filter[filterAttr] = value;\n    this.setState(filter);\n  };\n\n  // handleChangeContent = e => {\n  //   const { filter } = this.state;\n  //   filter.content = e.target.value;\n  //   this.setState(filter);\n  // };\n\n  // handleInitialDateChange = value => {\n  //   const { filter } = this.state;\n  //   filter.initialDate = value;\n  //   this.setState(filter);\n  // };\n\n  // handleFinalDateChange = value => {\n  //   const { filter } = this.state;\n  //   filter.finalDate = value;\n  //   this.setState(filter);\n  // };\n\n  // handleChangeLists = event => {\n  //   const { filter } = this.state;\n  //   filter.lists = event.target.value;\n  //   this.setState(filter);\n  // };\n\n  // handleChangeSocialNetworks = event => {\n  //   const { filter } = this.state;\n  //   filter.socialNetworks = event.target.value;\n  //   this.setState(filter);\n  // };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Filters\n          options={this.state.filterOptions}\n          filter={this.state.filter}\n          click={this.getFilteredPosts}\n          getFilteredPosts={this.getFilteredPosts}\n          handleFilterChange={this.handleFilterChange}\n          // handleChangeContent={this.handleChangeContent}\n          // handleInitialDateChange={this.handleInitialDateChange}\n          // handleFinalDateChange={this.handleFinalDateChange}\n          // handleChangeLists={this.handleChangeLists}\n          // handleChangeSocialNetworks={this.handleChangeSocialNetworks}\n        />\n        <PaginationTool\n          limit={this.state.pagination.limit}\n          offset={this.state.pagination.offset}\n          total={this.state.pagination.total}\n          handlePaginationLimitChange={this.handlePaginationLimitChange}\n          handlePaginationClick={this.handlePaginationClick}\n        />\n\n        <List posts={this.state.postsData.posts} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/Header/Header.js","components/Filters/Filters.js","components/List/List.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","Filters","props","FormControl","style","minWidth","InputLabel","Select","multiple","value","filter","lists","onChange","e","handleChangeLists","input","Input","renderValue","selected","map","Chip","key","label","options","name","MenuItem","id","socialNetworks","handleChangeSocialNetworks","utils","DateFnsUtils","disableToolbar","variant","format","margin","initialDate","handleInitialDateChange","KeyboardButtonProps","finalDate","handleFinalDateChange","TextField","content","handleChangeContent","Button","color","onClick","getFilteredPosts","List","list","posts","i","Paper","user","account","socialNetwork","link","date","App","state","postsData","summary","filterOptions","Date","getFullYear","getMonth","getDate","axios","post","then","res","data","setState","target","event","this","click","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qSAYeA,G,OARA,WACb,OACE,yBAAKC,UAAU,cACb,yBAAKC,IAAI,iJAAiJC,IAAI,Q,iGCmHrJC,G,OAvGC,SAAAC,GACd,OACE,yBAAKJ,UAAU,WAEb,kBAACK,EAAA,EAAD,CAAaL,UAAU,qBAAqBM,MAAO,CAAEC,SAAU,MAC7D,kBAACC,EAAA,EAAD,cACA,kBAACC,EAAA,EAAD,CACEC,UAAQ,EACRC,MAAOP,EAAMQ,OAAOC,MACpBC,SAAU,SAAAC,GAAC,OAAIX,EAAMY,kBAAkBD,IACvCE,MAAO,kBAACC,EAAA,EAAD,MACPC,YAAa,SAAAC,GAAQ,OACnB,yBAAKpB,UAAU,SACZoB,EAASC,KAAI,SAAAV,GAAK,OACjB,kBAACW,EAAA,EAAD,CAAMC,IAAKZ,EAAOa,MAAOb,EAAOX,UAAU,eAK/CI,EAAMqB,QAAQZ,MAAMQ,KAAI,SAAAK,GAAI,OAC3B,kBAACC,EAAA,EAAD,CAAUJ,IAAKG,EAAMf,MAAOe,GACzBA,QAOT,kBAACrB,EAAA,EAAD,CAAaL,UAAU,qBAAqBM,MAAO,CAAEC,SAAU,MAC7D,kBAACC,EAAA,EAAD,wBACA,kBAACC,EAAA,EAAD,CACEmB,GAAG,aACHlB,UAAQ,EACRC,MAAOP,EAAMQ,OAAOiB,eACpBf,SAAU,SAAAC,GAAC,OAAIX,EAAM0B,2BAA2Bf,IAChDE,MAAO,kBAACC,EAAA,EAAD,MACPC,YAAa,SAAAC,GAAQ,OACnB,yBAAKpB,UAAU,SACZoB,EAASC,KAAI,SAAAV,GAAK,OACjB,kBAACW,EAAA,EAAD,CAAMC,IAAKZ,EAAOa,MAAOb,EAAOX,UAAU,eAK/CI,EAAMqB,QAAQI,eAAeR,KAAI,SAAAK,GAAI,OACpC,kBAACC,EAAA,EAAD,CAAUJ,IAAKG,EAAMf,MAAOe,GACzBA,QAOP,kBAAC,IAAD,CAAyBK,MAAOC,KAChC,kBAAC,IAAD,CACEhC,UAAU,SACViC,gBAAc,EACdC,QAAQ,SACRC,OAAO,aACPC,OAAO,SACPZ,MAAM,eACNb,MAAOP,EAAMQ,OAAOyB,YACpBvB,SAAU,SAAAC,GAAC,OAAIX,EAAMkC,wBAAwBvB,IAC7CwB,oBAAqB,CACnB,aAAc,iBAKlB,kBAAC,IAAD,CACEvC,UAAU,SACViC,gBAAc,EACdC,QAAQ,SACRC,OAAO,aACPC,OAAO,SACPZ,MAAM,aACNb,MAAOP,EAAMQ,OAAO4B,UACpB1B,SAAU,SAAAC,GAAC,OAAIX,EAAMqC,sBAAsB1B,IAC3CwB,oBAAqB,CACnB,aAAc,kBAMpB,kBAACG,EAAA,EAAD,CACE1C,UAAU,SACVwB,MAAM,iBACNb,MAAOP,EAAMQ,OAAO+B,QACpB7B,SAAU,SAAAC,GAAC,OAAIX,EAAMwC,oBAAoB7B,MAE3C,kBAAC8B,EAAA,EAAD,CACEX,QAAQ,YACRY,MAAM,UACN9C,UAAU,SACV+C,QAAS,kBAAM3C,EAAM4C,qBAJvB,a,SCrFSC,G,OApBF,SAAC7C,GACZ,IAAM8C,EAAO9C,EAAM+C,MAAM9B,KAAI,SAACN,EAAGqC,GAAJ,OAC3B,kBAACC,EAAA,EAAD,CAAO9B,IAAK6B,EAAGpD,UAAU,QACvB,2BAAIe,EAAEuC,MACN,2BAAIvC,EAAEwC,SACN,2BAAIxC,EAAEyC,eACN,2BAAIzC,EAAE4B,SACN,2BAAI5B,EAAE0C,MACN,2BAAI1C,EAAE2C,MACN,2BAAI3C,EAAEF,WAIV,OACE,yBAAKb,UAAU,QACZkD,KC2EQS,G,kNArFbC,MAAQ,CACNC,UAAW,CACTV,MAAO,GACPW,QAAS,IAEXC,cAAe,CACblD,MAAO,CAAC,OAAQ,OAChBgB,eAAgB,CAAC,WAAY,YAE/BjB,OAAQ,CACN+B,QAAS,IACTN,YAAa,IAAI2B,MAAK,IAAIA,MAAOC,eAAc,IAAID,MAAOE,YAAa,IAAIF,MAAOG,UAAU,GAC5F3B,UAAW,IAAIwB,MAAK,IAAIA,MAAOC,eAAc,IAAID,MAAOE,YAAa,IAAIF,MAAOG,WAChFtD,MAAO,GACPgB,eAAgB,K,EAWpBmB,iBAAmB,WACjBoB,IACGC,KADH,0CACmD,EAAKT,MAAMhD,QAC3D0D,MAAK,SAAAC,GACJ,IAAMpB,EAAQoB,EAAIC,KAAOD,EAAIC,KAAO,GACpC,EAAKC,SAAS,CAAEtB,c,EAItBP,oBAAsB,SAAA7B,GAAM,IAClBH,EAAW,EAAKgD,MAAhBhD,OACRA,EAAO+B,QAAU5B,EAAE2D,OAAO/D,MAC1B,EAAK8D,SAAS7D,I,EAGhB0B,wBAA0B,SAAA3B,GAAU,IAC1BC,EAAW,EAAKgD,MAAhBhD,OACRA,EAAOyB,YAAc1B,EACrB,EAAK8D,SAAS7D,I,EAGhB6B,sBAAwB,SAAA9B,GAAU,IACxBC,EAAW,EAAKgD,MAAhBhD,OACRA,EAAO4B,UAAY7B,EACnB,EAAK8D,SAAS7D,I,EAGhBI,kBAAoB,SAAA2D,GAAU,IACpB/D,EAAW,EAAKgD,MAAhBhD,OACRA,EAAOC,MAAQ8D,EAAMD,OAAO/D,MAC5B,EAAK8D,SAAS7D,I,EAGhBkB,2BAA6B,SAAA6C,GAAU,IAC7B/D,EAAW,EAAKgD,MAAhBhD,OACRA,EAAOiB,eAAiB8C,EAAMD,OAAO/D,MACrC,EAAK8D,SAAS7D,I,mFA3CK,IAAD,OAClBwD,IAAMC,KAAN,0CAAsD,IAAIC,MAAK,SAAAC,GAC7D,IAAMV,EAAYU,EAAIC,KACtB,EAAKC,SAAS,CAAEZ,mB,+BA4ClB,OACE,yBAAK7D,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEyB,QAASmD,KAAKhB,MAAMG,cACpBnD,OAAQgE,KAAKhB,MAAMhD,OACnBiE,MAAOD,KAAK5B,iBACZA,iBAAkB4B,KAAK5B,iBACvBJ,oBAAqBgC,KAAKhC,oBAC1BN,wBAAyBsC,KAAKtC,wBAC9BG,sBAAuBmC,KAAKnC,sBAC5BzB,kBAAmB4D,KAAK5D,kBACxBc,2BAA4B8C,KAAK9C,6BAEnC,kBAAC,EAAD,CAAMqB,MAAOyB,KAAKhB,MAAMC,UAAUV,a,GAhFxB2B,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,iB","file":"static/js/main.57c6ee9f.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Header.css';\n\nconst Header = () => {\n  return ( \n    <div className=\"GovPredict\">\n      <img src=\"https://www.govpredict.com/hubfs/Govpredict-October2019/Images/govpredict-d2ac8edd9dc1af5cb1b14eab8109e58732989c88f206ab57715b6207dfac1826.svg\" alt=\"\"/>\n    </div>  \n   );\n}\n \nexport default Header;","import React from \"react\";\nimport {\n  Button,\n  Chip,\n  FormControl,\n  Input,\n  InputLabel,\n  MenuItem,\n  Select,\n  TextField\n} from \"@material-ui/core\";\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker\n} from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\n\nimport \"./Filters.css\";\n\nconst Filters = props => {\n  return (\n    <div className=\"Filters\">\n      {/* LISTS */}\n      <FormControl className=\"filter formcontrol\" style={{ minWidth: 200 }}>\n        <InputLabel>Lists</InputLabel>\n        <Select\n          multiple\n          value={props.filter.lists}\n          onChange={e => props.handleChangeLists(e)}\n          input={<Input />}\n          renderValue={selected => (\n            <div className=\"chips\">\n              {selected.map(value => (\n                <Chip key={value} label={value} className=\"chip\" />\n              ))}\n            </div>\n          )}\n        >\n          {props.options.lists.map(name => (\n            <MenuItem key={name} value={name}>\n              {name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n\n      {/* SOCIAL NETWORKS */}\n      <FormControl className=\"filter formControl\" style={{ minWidth: 200 }}>\n        <InputLabel>Social Networks</InputLabel>\n        <Select\n          id=\"scs-select\"\n          multiple\n          value={props.filter.socialNetworks}\n          onChange={e => props.handleChangeSocialNetworks(e)}\n          input={<Input />}\n          renderValue={selected => (\n            <div className=\"chips\">\n              {selected.map(value => (\n                <Chip key={value} label={value} className=\"chip\" />\n              ))}\n            </div>\n          )}\n        >\n          {props.options.socialNetworks.map(name => (\n            <MenuItem key={name} value={name}>\n              {name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n\n        {/* InitialData */}\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <KeyboardDatePicker\n          className=\"filter\"\n          disableToolbar\n          variant=\"inline\"\n          format=\"MM/dd/yyyy\"\n          margin=\"normal\"\n          label=\"Initial Date\"\n          value={props.filter.initialDate}\n          onChange={e => props.handleInitialDateChange(e)}\n          KeyboardButtonProps={{\n            \"aria-label\": \"change date\"\n          }}\n        />\n\n        {/* FinalData */}\n        <KeyboardDatePicker\n          className=\"filter\"\n          disableToolbar\n          variant=\"inline\"\n          format=\"MM/dd/yyyy\"\n          margin=\"normal\"\n          label=\"Final Date\"\n          value={props.filter.finalDate}\n          onChange={e => props.handleFinalDateChange(e)}\n          KeyboardButtonProps={{\n            \"aria-label\": \"change date\"\n          }}\n        />\n      </MuiPickersUtilsProvider>\n\n      {/* Content */}\n      <TextField\n        className=\"filter\"\n        label=\"Search Content\"\n        value={props.filter.content}\n        onChange={e => props.handleChangeContent(e)}\n      />\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className=\"filter\"\n        onClick={() => props.getFilteredPosts()}\n      >\n        Search\n      </Button>\n    </div>\n  );\n};\n\nexport default Filters;\n","import React from 'react';\nimport {Paper} from '@material-ui/core';\n\nimport './List.css';\n\nconst List = (props) => {\n  const list = props.posts.map((e, i) => (\n    <Paper key={i} className=\"card\">\n      <p>{e.user}</p>\n      <p>{e.account}</p>\n      <p>{e.socialNetwork}</p>\n      <p>{e.content}</p>\n      <p>{e.link}</p>\n      <p>{e.date}</p>\n      <p>{e.lists}</p>\n      </Paper>\n  ))\n\n  return ( \n    <div className=\"list\"> \n      {list}\n    </div>\n   );\n}\n \nexport default List;","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport Header from \"./components/Header/Header\";\nimport Filters from \"./components/Filters/Filters\";\nimport List from \"./components/List/List\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    postsData: {\n      posts: [],\n      summary: {}\n    },\n    filterOptions: {\n      lists: [\"Cool\", \"Bad\"],\n      socialNetworks: [\"Facebook\", \"Twitter\"]\n    },\n    filter: {\n      content: \"A\",\n      initialDate: new Date(new Date().getFullYear(),new Date().getMonth() , new Date().getDate()-1),\n      finalDate: new Date(new Date().getFullYear(),new Date().getMonth() , new Date().getDate()),\n      lists: [],\n      socialNetworks: []\n    }\n  };\n\n  componentDidMount() {\n    axios.post(`https://localhost:5001/post/filter/1/10`, {}).then(res => {\n      const postsData = res.data;\n      this.setState({ postsData });\n    });\n  }\n\n  getFilteredPosts = () => {\n    axios\n      .post(`https://localhost:5001/post/filter/1/10`, this.state.filter)\n      .then(res => {\n        const posts = res.data ? res.data : [];\n        this.setState({ posts });\n      });\n  };\n\n  handleChangeContent = e => {\n    const { filter } = this.state;\n    filter.content = e.target.value;\n    this.setState(filter);\n  };\n\n  handleInitialDateChange = value => {\n    const { filter } = this.state;\n    filter.initialDate = value;\n    this.setState(filter);\n  };\n\n  handleFinalDateChange = value => {\n    const { filter } = this.state;\n    filter.finalDate = value;\n    this.setState(filter);\n  };\n\n  handleChangeLists = event => {\n    const { filter } = this.state;\n    filter.lists = event.target.value;\n    this.setState(filter);\n  };\n\n  handleChangeSocialNetworks = event => {\n    const { filter } = this.state;\n    filter.socialNetworks = event.target.value;\n    this.setState(filter);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Filters\n          options={this.state.filterOptions}\n          filter={this.state.filter}\n          click={this.getFilteredPosts}\n          getFilteredPosts={this.getFilteredPosts}\n          handleChangeContent={this.handleChangeContent}\n          handleInitialDateChange={this.handleInitialDateChange}\n          handleFinalDateChange={this.handleFinalDateChange}\n          handleChangeLists={this.handleChangeLists}\n          handleChangeSocialNetworks={this.handleChangeSocialNetworks}\n        />\n        <List posts={this.state.postsData.posts} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}